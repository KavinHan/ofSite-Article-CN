ofTutorials - Introduction
==========================
Jeff Crouse <jeff@crouse.cc>
v0.2, September 2013:
:Author Initials: JRC, JED
:icons:
:numbered:
:doctype: book
:author_site: http://www.jeffcrouse.info
:summary: This chapter will introduce openFrameworks and prepare you to start your first project.

This chapter will introduce openFrameworks and prepare you to start your first project.

image::images/ofw-logo.png["oF Logo",float="right"]

什么是OpenFrameworks?
=======================

[quote, openframeworks.cc/about]
__________________________
openFrameworks 是一个提供简易操作骨架的http://www.openframeworks.cc/about/license.html[开源] http://en.wikipedia.org/wiki/C%2B%2B"[C++] 工具。他的用意在于协助大家发掘实验性的新创作。附有的工具箱可以把不同即常用的库联合在一起，这包括了：

- http://www.opengl.org/[OpenGL], http://glew.sourceforge.net/[GLEW], http://www.opengl.org/resources/libraries/glut/[GLUT], http://www.glfw.org/[GLFW], https://code.google.com/p/libtess2/[libtess2] 和 http://cairographics.org/[cairo] （图像）
- http://www.music.mcgill.ca/~gary/rtaudio/[rtAudio], http://www.portaudio.com/[PortAudio] 或 http://www.fmod.org/[FMOD] 和 http://kissfft.sourceforge.net/[Kiss FFT] （音频输入，输出和分析）
- http://freetype.sourceforge.net/index2.html[FreeType] （字体）
- http://freeimage.sourceforge.net/[FreeImage] （保存和加载图像）
- http://developer.apple.com/quicktime/[Quicktime] 和 https://github.com/ofTheo/videoInput[videoInput] （播放和捕捉视频）
- http://pocoproject.org/[Poco]（多用途）

这里的代码具有大规模跨平台兼容的可能性。至今我们支持的操作系统有五个 (Windows, OSX, Linux, iOS, Android) 和四个IDEs (XCode, Code::Blocks, Visual Studio 和 Eclipse). 里头包含的 API设计简略也容易掌握。

简单来说, openFrameworks 是一个把打代码简单化的工具。我们认为这是个可靠的工具，希望你也能体会到。

openFrameworks 会在 http://www.openframeworks.cc/community/[OF 社群]的协助下长期性由 http://thesystemis.com/[Zach Lieberman], http://muonics.net/[Theodore Watson], 和 http://arturocastro.net/[Arturo Castro]不断的开发。 openFrameworks 非常感激两位重要的先导，http://reas.com/[Casey Reas]和 http://benfry.com/[Ben Fry]创造的 the http://processing.org/[Processing开发环境], Processing社群; 和ACU工具包, 一个由Ben Fry和 http://acg.media.mit.edu/[MIT Media Lab's Aesthetics and Computation Group]创建的私自分布 C++库。
__________________________


一些包(例如 OpenGL)会在其他文件里深入的被开发。它们一般都在背后操作，完全不会影响到大家。它们特有的库拥有不同的句法，惯例 quirks, 不过openFrameworks最美妙的地方是你不必为这些操心 -- oF 是一个能够连贯众多提供库并完善操作这些功能的界面。

[qanda]
.Q&A
这是程序吗？::
    OF不是 http://en.wikipedia.org/wiki/Computer_program[程序]，也不是 http://en.wikipedia.org/wiki/Software_application[应用程序]，但是你可以使用OF写属于你的程序或应用程序。

这是程序语言吗？::
	OF并没有特别构成自己的 http://en.wikipedia.org/wiki/Programming_language[程序语言]，相反的，OF是用 http://en.wikipedia.org/wiki/C%2B%2B[C++]来打代码的.

那这是库吗？:
	OF是由各种不同的 http://en.wikipedia.org/wiki/Software_library[软件库]组成的，严格来说OF使用了软件骨架联合各种不同的库。

什么是软件骨架？::
	http://en.wikipedia.org/wiki/Software_framework[软件骨架] 是个提供创造应用程序所需要的初级功能，同时让程序员能为应用程序定制高等级细节的预制基础设施软件。使用骨架和直接使用库的分别是在与 http://en.wikipedia.org/wiki/Inversion_of_control[倒反]操控的流程。库可以直接用代码控制它，让它为您完成一些事项。在骨架里，您的代码给予的回应都由骨架控制以及善用它来连起各种库的功能。

听起来很复杂吗？

或许大家不知道，众多多媒体创作环境都是这样操作。

想象一下，假设：您正在自创自导一个属于你的电影， 同时也决定和某家影片制作公司合作。这家公司为你安排了你需要的地点，提供基本设备，招募拍摄人员，灯光师，声音编辑师 等等。它们会确保一切准备就绪，包括工作伙伴和您都得准时出席拍摄。您的工作就是带领大家拍摄理想的镜头。OpenFrameworks就像影片制作公司。他帮你打点好行政及后勤，好让您能够专注于您的创作。

C++ is a programming language
-----------------------------

我们都知道openFrameworks 并不是程序语言，而是个制作 http://en.wikipedia.org/wiki/C%2B%2B[`C++`]程序的软件骨架。那 C++到底是什么？

NOTE: 以下文件主要用意是让大家更了解openFrameworks，同时更能理解`C++` 程序语言。 不过我们不会太深入的介绍`C++`, 要是想了解更多，不妨尝试从附录里寻找 OF额外资源，这或许能帮助您添加一些头绪。

`C++` 是个Bell Labs于1979年，以 http://en.wikipedia.org/wiki/C_(programming_language)[C 族程序语言]开始研发的伸展。这两个程序语言都可以使用于大多数的程序平台。最基本的 C++ 程序架构如下：

[source,cpp]
---------------------------------------------------------------------
// my first program in C++

#include <iostream>
using namespace std;

int main()
{
  cout << "Hello World!\n";
  return 0;
}
---------------------------------------------------------------------

小贴士：你可以在 http://www.cplusplus.com/doc/tutorial/program_structure/[cplusplus.com "Structure of a program"] 教学里了解这个程序每一行的详细解说.

After being run through a compiler, this code will create a fully executable program. It is an exceedingly simple command-line program that simply prints "Hello World!" to the console, but a program nonetheless. You can try it yourself by following these steps:

警告：不同的平台会让这个步骤带来一些变化。以下的指导只是给 Mac OS使用者，开始之前记得把 XCode 下载并打开来。

Compiling your First C++ program
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

image::images/PlainText.png["PlainText",float="right"]

. Paste the code above into a text file and save it on your Desktop as *hello.cpp*.
.. If you are using TextEdit, make sure you specify that you want to save it as "plain text", not "rich text" or anything else.
. Go into /Applications/Utilities and double-click on Terminal.app image:images/Terminal.png["Terminal.app",height=24]
. Type the following into the Terminal window, pressing enter after each line:

.......................................
cd Desktop <1>
g++ -o hello hello.cpp <2>
./hello <3>
.......................................

<1> Navigate ("change directory") to the Desktop
<2> Use the http://gcc.gnu.org/[g++] program to compile hello.cpp (the source code file) into a program called "hello"
<3> Execute the "hello" program that you just created

The result should look like this:

image::images/HelloWorld.png["Hello World!"]

Congratulations, you've just created (and then run) your first C++ program!  You should see something that looks like this on your Desktop:

image::images/hello.png["Your First Program"]

This might not look like other programs that you are used to -- programs with flashy custom icons that launch windows and use graphics and such -- but it's a program nonetheless. In fact, if you dig deep enough, every program on your computer boils down to a something just like the 'hello' program you just created. The rest is just bells and whistles.

IMPORTANT: I can hear some people panicking right now, but don't worry! Things get much more exciting when we start playing with oF. This example was only meant to illustrate the low-level basics of C++. Hopefully you will never have to compile a command line program on the command line again.


What is a compiler? and an IDE?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you have used a program like Flash or Processing, you are familiar with the process of writing some code and then "pressing play" to see it in action. This is called *compilation* or *compiling*, and it's what we just did in the previous section. If you are familiar with video editing, compiling is somewhat similar to rendering. The idea is that you must translate the code that is "human readable" into a format that your computer can execute. C, C++, Java, Objective-C, Fortran, Lisp, Pascal... these are all http://en.wikipedia.org/wiki/Compiled_language[compiled languages]. As cryptic as they may seem, all of these languages are supposed to be "human readable". They were created specifically to be written, read, and understood by humans. But no matter which language you start with, in the end, it has to be translated into something your computer can understand. Namely, http://en.wikipedia.org/wiki/Machine_code[machine code].

NOTE: Some languages, such as PHP and Python are known as "scripting languages."  They still require compiling, but it happens right before the program executes.

The program that does the job of taking your code and translating it into machine code is called the *compiler*. http://gcc.gnu.org/[GCC] is one of the most popular compilers. It can compile lots of different languages. GCC is great for compiling, but knowing exactly how to tell the program exactly what you want to do is the subject of much headache and frustration. In the previous section, we compiled a program with the simple command "g++ -o hello hello.cpp", but once you start doing stuff like using existing libraries, optimizing code for particular processors, bundling your application with resources like images, etc., all bets are off. Telling GCC to compile even a moderately complicated openFrameworks project takes hundreds of lines of isoteric syntax and invoking dozens of helper tools. It's super complex.

So instead, most developers use http://en.wikipedia.org/wiki/Integrated_development_environment[IDEs (Integrated Development Environments)] to organize and create code projects. Most IDEs will include a text editor, a file organizer, a compiler, and lots of GUI interfaces for customizing all of the options and details of the compilation process. http://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments[Some popular IDEs are]: XCode, Visual Studio, CodeBlocks, Eclipse, NetBeans. There are IDEs for every operating system and language. Some IDEs are for one specific language and some support many.

You *might* be able to get away with calling stuff like Flash, Processing, VVVV, and MaxMSP IDEs -- most of the important features are there. The difference is that IDEs are typically blank slates -- they don't come with any specific functionality. The other tools, on the other hand, come with lots of built-in functionality that is usually optimized for a particular purpose. For instance, Flash compiles programs to be run on the web, while Processing is a rapid prototyping tool.

openFrameworks definitely comes with a lot of functionality. The difference with openFrameworks is that it doesn't come with it's own IDE. Technically, you can use whatever IDE you want to create an openFrameworks project, but just as interfacing with a compiler can be difficult, the process of setting up a project of any complexity in an IDE can also be complex and tedious. One of the great things about openFrameworks is that it provides starting points for several IDEs on the 3 major platforms. They've done the hard work of creating project templates for 3 different IDEs on the 3 major platforms so all you have to do is download and start coding.

To get started working with openFrameworks, you will want to download and install an IDE for your operating system. Guides for installations can be found here:

Windows
^^^^^^^
- http://www.openframeworks.cc/setup/codeblocks/[Code::Blocks setup guide]
- http://www.openframeworks.cc/setup/vs/[Visual Studio setup guide]

Mac
^^^
- http://www.openframeworks.cc/setup/xcode/[Xcode Setup Guide]

Linux
^^^^^
- http://www.openframeworks.cc/setup/linux-codeblocks/[Linux Code::Blocks & makefiles]
- http://www.openframeworks.cc/setup/raspberrypi/[Raspberry Pi]

What Can I Make with oF?
~~~~~~~~~~~~~~~~~~~~~~~~

以下展现的项目能够让大家以视觉了解 openFramework 能做到的范围包括了什么。


Puppet Parade
^^^^^^^^^^^^^
by Emily Gobeille and Theo Watson
[quote, creativeapplications.net]
__________________________
Puppet Parade is an interactive installation by Emily Gobeille and Theo Watson of Design I/O that allows children to use their arms to puppeteer larger than life creatures projected on the wall in front of them. This dual interactive setup allows children to perform alongside the puppets, blurring the line between the ‘audience’ and the puppeteers and creating an endlessly playful dialogue between the children in the space and the children puppeteering the creatures.
__________________________
++++
<iframe src="http://player.vimeo.com/video/34824490?title=0&amp;byline=0&amp;portrait=0" width="640" height="360" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
++++
http://www.creativeapplications.net/openframeworks/puppet-parade-openframeworks/[More Information]


Interactive Wall at UD
^^^^^^^^^^^^^^^^^^^^^^
[quote, flightphase.com]
__________________________
The 36-foot wall at the University of Dayton’s admission center engages prospective students and reveals videos of student life at UD. The wall displays continuously changing patterns of generative graphics, which respond to the presence of people in front of the wall.

The field of cubes is animated with waves of activity, and a viewer’s presence causes them to rotate and unveil POV videos of a student experience. The viewers can explore the videos moving around to reveal different video fragments. When viewers stand together, their silhouettes join to reveal more of the video. When no one is present in the interaction area the installation displays typographic animations overlaid on the dynamically animated graphic patterns.

For more video documentation and details of design and development process see the http://www.flightphase.com/main_wp/case-studies/ud-interactive-wall[Case Study].
__________________________
++++
<iframe src="http://player.vimeo.com/video/27500054?title=0&amp;byline=0&amp;portrait=0" width="640" height="360" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
++++
http://www.flightphase.com/main_wp/expanded-media/interactive-wall-at-ud[More information]

Scramble Suit
^^^^^^^^^^^^^
by Arturo Castro and Kyle McDonald

One great thing about openFrameworks is that how easy to incorporate C++ code from pretty much any library. To that end, Arturo and Kyle used a http://web.mac.com/jsaragih/FaceTracker/FaceTracker.html[Face Tracker library by Jason Saragih] to create a face-replacement technique that Kyle named "Scramble Suit" inspired by fictional technology from Philip K. Dick’s 1977 novel, "A Scanner Darkly". It’s effectively a cloak that hides the identity of the wearer by making it impossible to describe or remember them.
++++
<iframe src="http://player.vimeo.com/video/29391633?title=0&amp;byline=0&amp;portrait=0" width="640" height="360" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
++++


为什么选择 openFrameworks?
~~~~~~~~~~~~~~~~~~~
openFrameworks 不是世间唯一的创意程序骨架。那为什么您应该 ／不应该选择使用 openFrameworks呢？

即将上载。。。

oF额外资源
~~~~~~~~~
- http://www.openframeworks.cc/about/[About openFrameworks] More about openFrameworks, including the design methodology.
- http://www.openframeworks.cc/documentation/[Official Documentation] Where you can find descriptions of classes and functions that make up openFrameworks
- http://forum.openframeworks.cc/[oF Forum] Probably the best place to get your questions answered
- http://www.amazon.com/Programming-Interactivity-Designers-Processing-Openframeworks/dp/0596154143[Programming Interactivity] A great book that covers openFrameworks, Processing, and Arduino.
- http://www.creativeapplications.net/[Creative Applications]
